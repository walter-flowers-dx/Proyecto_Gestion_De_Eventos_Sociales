/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package interfaz;


import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.FileInputStream;
import java.io.ObjectInputStream;
import java.text.DecimalFormat;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

import pkg121.*;


/**
 *
 * @author USUARIO
 */
public class Page16 extends javax.swing.JPanel {

  
 private ColaCircularCentroConvencion cccc;
     private DefaultTableModel modeloTabla;
    public Page16() {
       initComponents();
        cargarDatosDesdeArchivo();
        inicializarTabla(); // Inicializa las columnas de la tabla
        mostrarDatosEnTabla(); // Muestra los datos en la tabla al cargar
    }
   // Método para cargar los datos de la cola circular
    public void setColaCircularCentroConvencion(ColaCircularCentroConvencion cccc) {
        this.cccc = cccc;
    }
    private void inicializarTabla() {
        modeloTabla = new DefaultTableModel();
        modeloTabla.addColumn("Nombre del Evento");
        modeloTabla.addColumn("Tipo de Evento");
        modeloTabla.addColumn("Fecha");
        jTable1.setModel(modeloTabla);
    }

    // Método para mostrar los datos en la tabla
    private void mostrarDatosEnTabla() {
        if (cccc == null || cccc.esVacia()) {
            System.out.println("No hay datos del Centro de Convenciones cargados.");
            return;
        }

        ColaCircularCentroConvencion aux = new ColaCircularCentroConvencion();

        while (!cccc.esVacia()) {
            CentroConvencion cc = cccc.eli(); // Extraemos un centro
            Mp_PilaEventos mpPilaEventos = cc.getMp_PilaEventos();

            for (int i = 0; i < mpPilaEventos.getN(); i++) {
                PilaEventos pilaEventos = mpPilaEventos.getPilas()[i];

                // Usamos una pila auxiliar para no perder los datos
                PilaEventos pilaAuxiliar = new PilaEventos();

                while (!pilaEventos.esVacia()) {
                    Eventos evento = pilaEventos.eli();
                    modeloTabla.addRow(new Object[]{
                        evento.getNombre(),
                        evento.getTipoEvento(),
                        evento.getFecha()
                    });
                    pilaAuxiliar.adi(evento); // Restauramos los eventos
                }

                pilaEventos.vaciar(pilaAuxiliar); // Restauramos la pila original
            }

            aux.adi(cc); // Restauramos el centro de convenciones
        }

        cccc.vaciar(aux); // Restauramos la cola circular original
    }



    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    // </editor-fold>
@SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jLabel4 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        jButton1 = new javax.swing.JButton();
        eventox = new javax.swing.JTextField();
        fechax = new javax.swing.JTextField();

        setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jPanel1.setBackground(new java.awt.Color(51, 51, 51));

        jLabel4.setBackground(new java.awt.Color(255, 255, 255));
        jLabel4.setFont(new java.awt.Font("Roboto", 1, 18)); // NOI18N
        jLabel4.setForeground(new java.awt.Color(255, 255, 255));
        jLabel4.setText("Agregar un evento y si hay solapamiento mostrar el evento que se está solapando ");
        jLabel4.setToolTipText("");
        jLabel4.setVerticalAlignment(javax.swing.SwingConstants.TOP);

        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {

            }
        ));
        jScrollPane1.setViewportView(jTable1);

        jButton1.setText("Mostrar");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        eventox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                eventoxActionPerformed(evt);
            }
        });

        fechax.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                fechaxActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(38, 38, 38)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jButton1, javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(eventox, javax.swing.GroupLayout.DEFAULT_SIZE, 81, Short.MAX_VALUE)
                            .addComponent(fechax))
                        .addGap(69, 69, 69)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 519, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(18, 18, 18)
                        .addComponent(jLabel4)))
                .addContainerGap(17, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(25, 25, 25)
                .addComponent(jLabel4)
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 268, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addContainerGap(85, Short.MAX_VALUE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(49, 49, 49)
                        .addComponent(eventox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(fechax, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jButton1)
                        .addGap(128, 128, 128))))
        );

        add(jPanel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 760, 420));
    }// </editor-fold>//GEN-END:initComponents
    // Método para cargar datos desde el archivo
    private void cargarDatosDesdeArchivo() {
        try (ObjectInputStream ois = new ObjectInputStream(new FileInputStream("src/Datos/datosCentroConvencion.dat"))) {
            cccc = (ColaCircularCentroConvencion) ois.readObject();
            System.out.println("Datos cargados correctamente desde el archivo.");
        } catch (Exception e) {
            cccc = new ColaCircularCentroConvencion();
            System.out.println("Error al cargar datos: " + e.getMessage());
        }
    }
    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed

    String nuevoEventoNombre = eventox.getText().trim();
    String nuevaFecha = fechax.getText().trim();

    if (nuevoEventoNombre.isEmpty() || nuevaFecha.isEmpty()) {
        System.out.println("Debe ingresar tanto el nombre del evento como la fecha.");
        return;
    }

    if (cccc == null || cccc.esVacia()) {
        System.out.println("No hay datos del Centro de Convenciones cargados.");
        return;
    }

    // Verificar si el evento ya existe o tiene solapamiento
    String resultadoVerificacion = verificarEvento(nuevoEventoNombre, nuevaFecha);

    // Si no hay duplicados ni solapamientos, agregar el evento
    if (resultadoVerificacion.equals("Nuevo Evento")) {
        agregarEvento(nuevoEventoNombre, nuevaFecha);
        // Mostrar en la tabla solo si el evento fue agregado
        modeloTabla.addRow(new Object[]{
            nuevoEventoNombre,
            "Privado",
            nuevaFecha
        });
        System.out.println("Evento agregado exitosamente.");
    } else {
        JOptionPane.showMessageDialog(this, "Hay solapamineto. No se pudo agregar " + nuevoEventoNombre + " - " + nuevaFecha );

    }
}

// Método auxiliar para verificar si el evento ya existe o tiene solapamiento
private String verificarEvento(String nombre, String fecha) {
    boolean duplicado = false;
    boolean solapamiento = false;

    ColaCircularCentroConvencion aux = new ColaCircularCentroConvencion();

    // Iterar por los centros de convenciones
    while (!cccc.esVacia()) {
        CentroConvencion cc = cccc.eli();
        Mp_PilaEventos mpPilaEventos = cc.getMp_PilaEventos();

        // Iterar por las pilas de eventos
        for (int i = 0; i < mpPilaEventos.getN(); i++) {
            PilaEventos pilaEventos = mpPilaEventos.getPilas()[i];
            PilaEventos pilaAuxiliar = new PilaEventos();

            // Iterar por los eventos dentro de la pila
            while (!pilaEventos.esVacia()) {
                Eventos evento = pilaEventos.eli();

                // Verificar si el evento ya existe
                if (evento.getNombre().equalsIgnoreCase(nombre) && evento.getFecha().equals(fecha)) {
                    duplicado = true;
                }

                // Verificar si hay solapamiento en la fecha
                if (evento.getFecha().equals(fecha)) {
                    solapamiento = true;
                }

                pilaAuxiliar.adi(evento); // Restaurar el evento
            }

            pilaEventos.vaciar(pilaAuxiliar); // Restaurar la pila original
        }

        aux.adi(cc); // Restaurar el centro en la cola auxiliar
    }

    cccc.vaciar(aux); // Restaurar la cola original

    if (duplicado) return "Intento Duplicado";
    if (solapamiento) return "Solapamiento";
    return "Nuevo Evento";
}

// Método auxiliar para agregar un nuevo evento
private void agregarEvento(String nombre, String fecha) {
    ColaCircularCentroConvencion aux = new ColaCircularCentroConvencion();

    while (!cccc.esVacia()) {
        CentroConvencion cc = cccc.eli();
        Mp_PilaEventos mpPilaEventos = cc.getMp_PilaEventos();

        // Agregar el evento al primer espacio disponible
        for (int i = 0; i < mpPilaEventos.getN(); i++) {
            PilaEventos pilaEventos = mpPilaEventos.getPilas()[i];
            pilaEventos.adi(new Eventos(null, null, null, null, nombre, "Privado", 0, 0, fecha, "Normal"));
            break;
        }

        aux.adi(cc); // Restaurar el centro en la cola auxiliar
    }

    cccc.vaciar(aux); // Restaurar la cola original
    }//GEN-LAST:event_jButton1ActionPerformed


    private void eventoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_eventoxActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_eventoxActionPerformed

    private void fechaxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_fechaxActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_fechaxActionPerformed
       


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextField eventox;
    private javax.swing.JTextField fechax;
    private javax.swing.JButton jButton1;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable jTable1;
    // End of variables declaration//GEN-END:variables
}
