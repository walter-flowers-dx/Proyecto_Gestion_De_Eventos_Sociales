/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package interfaz;


import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.FileInputStream;
import java.io.ObjectInputStream;
import java.text.DecimalFormat;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

import pkg121.*;


/**
 *
 * @author USUARIO
 */
public class Page13 extends javax.swing.JPanel {

  
 private ColaCircularCentroConvencion cccc;
    
    public Page13() {
        initComponents();
    cargarDatosDesdeArchivo(); 
        
    }
   // Método para cargar los datos de la cola circular
    public void setColaCircularCentroConvencion(ColaCircularCentroConvencion cccc) {
        this.cccc = cccc;
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    // </editor-fold>
@SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jLabel4 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        jButton1 = new javax.swing.JButton();

        setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jPanel1.setBackground(new java.awt.Color(51, 51, 51));

        jLabel4.setBackground(new java.awt.Color(255, 255, 255));
        jLabel4.setFont(new java.awt.Font("Roboto", 1, 24)); // NOI18N
        jLabel4.setForeground(new java.awt.Color(255, 255, 255));
        jLabel4.setText("Verificar la disponibilidad de espacios de un evento ");

        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {

            }
        ));
        jScrollPane1.setViewportView(jTable1);

        jButton1.setText("Mostrar");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addGap(47, 47, 47)
                .addComponent(jButton1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 48, Short.MAX_VALUE)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 519, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(74, 74, 74))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jLabel4)
                .addGap(42, 42, 42))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(27, 27, 27)
                .addComponent(jLabel4)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(32, 32, 32)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 268, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(102, 102, 102)
                        .addComponent(jButton1)))
                .addContainerGap(61, Short.MAX_VALUE))
        );

        add(jPanel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 760, 420));
    }// </editor-fold>//GEN-END:initComponents
    // Método para cargar datos desde el archivo
    private void cargarDatosDesdeArchivo() {
        try (ObjectInputStream ois = new ObjectInputStream(new FileInputStream("src/Datos/datosCentroConvencion.dat"))) {
            cccc = (ColaCircularCentroConvencion) ois.readObject();
            System.out.println("Datos cargados correctamente desde el archivo.");
        } catch (Exception e) {
            cccc = new ColaCircularCentroConvencion();
            System.out.println("Error al cargar datos: " + e.getMessage());
        }
    }
    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
 // Crear el modelo de la tabla
        DefaultTableModel modeloTabla = new DefaultTableModel();
        modeloTabla.addColumn("Evento");
        modeloTabla.addColumn("Cantidad de Espacios");
        modeloTabla.addColumn("Disponibilidad");

        // Verificar si la cola tiene datos
        if (cccc == null || cccc.esVacia()) {
            JOptionPane.showMessageDialog(this, "No hay datos del Centro de Convenciones cargados.");
            return;
        }

        // Iterar sobre los Centros de Convención
        ColaCircularCentroConvencion aux = new ColaCircularCentroConvencion();
        while (!cccc.esVacia()) {
            CentroConvencion centro = cccc.eli(); // Extraer el Centro de Convención
            Mp_PilaEventos mpPilaEventos = centro.getMp_PilaEventos();

            // Procesar cada pila de eventos en el Centro
            for (int i = 0; i < mpPilaEventos.getN(); i++) {
                PilaEventos pilaEventos = mpPilaEventos.getPilas()[i];
                PilaEventos pilaAux = new PilaEventos();

                // Procesar cada evento en la pila
                while (!pilaEventos.esVacia()) {
                    Eventos evento = pilaEventos.eli();

                    // Determinar disponibilidad de espacios
                    String disponibilidad = evento.getCantidadEspacios() > 0 ? "Sí" : "No";

                    // Agregar los datos a la tabla
                    modeloTabla.addRow(new Object[]{
                        evento.getNombre(),
                        evento.getCantidadEspacios(),
                        disponibilidad
                    });

                    // Restaurar el evento en la pila auxiliar
                    pilaAux.adi(evento);
                }

                // Restaurar la pila original
                pilaEventos.vaciar(pilaAux);
            }

            // Restaurar el Centro de Convención en la cola auxiliar
            aux.adi(centro);
        }

        // Restaurar la cola original
        cccc.vaciar(aux);

        // Asignar el modelo a la tabla
        jTable1.setModel(modeloTabla);
        
    }//GEN-LAST:event_jButton1ActionPerformed
       


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable jTable1;
    // End of variables declaration//GEN-END:variables
}
