/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package interfaz;


import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.FileInputStream;
import java.io.ObjectInputStream;
import java.text.DecimalFormat;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

import pkg121.*;


/**
 *
 * @author USUARIO
 */
public class Page12 extends javax.swing.JPanel {

  
 private ColaCircularCentroConvencion cccc;
             private DefaultTableModel modeloTabla;

    public Page12() {
 initComponents();
        cargarDatosDesdeArchivo();
        inicializarTabla(); // Inicializa las columnas de la tabla
        mostrarDatosEnTabla();
    }
   // Método para cargar los datos de la cola circular
    public void setColaCircularCentroConvencion(ColaCircularCentroConvencion cccc) {
        this.cccc = cccc;
    }
private void inicializarTabla() {
        modeloTabla = new DefaultTableModel();
        modeloTabla.addColumn("Nombre del Evento");
        modeloTabla.addColumn("Tipo de Evento");
        modeloTabla.addColumn("Fecha");
        jTable1.setModel(modeloTabla);
    }

    // Método para mostrar los datos en la tabla
    private void mostrarDatosEnTabla() {
        if (cccc == null || cccc.esVacia()) {
            System.out.println("No hay datos del Centro de Convenciones cargados.");
            return;
        }

        ColaCircularCentroConvencion aux = new ColaCircularCentroConvencion();

        while (!cccc.esVacia()) {
            CentroConvencion cc = cccc.eli(); // Extraemos un centro
            Mp_PilaEventos mpPilaEventos = cc.getMp_PilaEventos();

            for (int i = 0; i < mpPilaEventos.getN(); i++) {
                PilaEventos pilaEventos = mpPilaEventos.getPilas()[i];

                // Usamos una pila auxiliar para no perder los datos
                PilaEventos pilaAuxiliar = new PilaEventos();

                while (!pilaEventos.esVacia()) {
                    Eventos evento = pilaEventos.eli();
                    modeloTabla.addRow(new Object[]{
                        evento.getNombre(),
                        evento.getTipoEvento(),
                        evento.getFecha()
                    });
                    pilaAuxiliar.adi(evento); // Restauramos los eventos
                }

                pilaEventos.vaciar(pilaAuxiliar); // Restauramos la pila original
            }

            aux.adi(cc); // Restauramos el centro de convenciones
        }

        cccc.vaciar(aux); // Restauramos la cola circular original
    }
     private void cargarDatosDesdeArchivo() {
        try (ObjectInputStream ois = new ObjectInputStream(new FileInputStream("src/Datos/datosCentroConvencion.dat"))) {
            cccc = (ColaCircularCentroConvencion) ois.readObject();
            System.out.println("Datos cargados correctamente desde el archivo.");
        } catch (Exception e) {
            cccc = new ColaCircularCentroConvencion();
            System.out.println("Error al cargar datos: " + e.getMessage());
        }
    }
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    // </editor-fold>
@SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jLabel4 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        jButton1 = new javax.swing.JButton();

        setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jPanel1.setBackground(new java.awt.Color(51, 51, 51));

        jLabel4.setBackground(new java.awt.Color(255, 255, 255));
        jLabel4.setFont(new java.awt.Font("Roboto", 1, 24)); // NOI18N
        jLabel4.setForeground(new java.awt.Color(255, 255, 255));
        jLabel4.setText("Calcula el promedio de pagos en los eventos ");

        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {

            }
        ));
        jScrollPane1.setViewportView(jTable1);

        jButton1.setText("Mostrar");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addGap(59, 59, 59)
                .addComponent(jButton1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 36, Short.MAX_VALUE)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 519, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(74, 74, 74))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jLabel4)
                .addGap(88, 88, 88))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(30, 30, 30)
                        .addComponent(jLabel4)
                        .addGap(29, 29, 29)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 268, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(151, 151, 151)
                        .addComponent(jButton1)))
                .addContainerGap(61, Short.MAX_VALUE))
        );

        add(jPanel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 760, 420));
    }// </editor-fold>//GEN-END:initComponents
    // Método para cargar datos desde el archivo

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
       if (cccc == null || cccc.esVacia()) {
        JOptionPane.showMessageDialog(this, "No hay datos cargados en el sistema.", "Error", JOptionPane.ERROR_MESSAGE);
        return;
    }

    DefaultTableModel modeloTabla = new DefaultTableModel();
    modeloTabla.addColumn("Evento");
    modeloTabla.addColumn("Cantidad Personas");
    modeloTabla.addColumn("Pagos");

    ColaCircularCentroConvencion aux = new ColaCircularCentroConvencion();
    int totalEventos = 0;
    double totalPagosGlobal = 0;

    while (!cccc.esVacia()) {
        CentroConvencion centro = cccc.eli();
        Mp_PilaEventos mppe = centro.getMp_PilaEventos();

        if (mppe != null) {
            for (int i = 0; i < mppe.getN(); i++) {
                PilaEventos pila = mppe.getPilas()[i];
                if (pila != null) {
                    PilaEventos pilaAux = new PilaEventos();
                    while (!pila.esVacia()) {
                        Eventos evento = pila.eli();
                        ColaSimplePersonas personas = evento.getColaSimplePersonas();

                        if (personas != null) {
                            int totalPersonas = 0;
                            double totalPagos = 0;
                            ColaSimplePersonas auxPersonas = new ColaSimplePersonas();

                            while (!personas.esVacia()) {
                                Personas p = personas.eli();
                                totalPersonas += p.getCantidadPersonas();
                                totalPagos += p.getPagos();
                                auxPersonas.adi(p);
                            }
                            personas.vaciar(auxPersonas);

                            totalPagosGlobal += totalPagos;
                            totalEventos++; // Contar el evento

                            modeloTabla.addRow(new Object[]{
                                evento.getNombre(),
                                totalPersonas,
                                totalPagos
                            });
                        }
                        pilaAux.adi(evento);
                    }
                    pila.vaciar(pilaAux);
                }
            }
        }
        aux.adi(centro);
    }
    cccc.vaciar(aux);

    // Agregar fila del promedio general
    double promedioGeneral = totalEventos > 0 ? totalPagosGlobal / totalEventos : 0;
    modeloTabla.addRow(new Object[]{
        "Promedio General",
        "", // No se muestra cantidad de personas
        String.format("%.2f", promedioGeneral)
    });

    jTable1.setModel(modeloTabla);
        
        
    }//GEN-LAST:event_jButton1ActionPerformed
       


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable jTable1;
    // End of variables declaration//GEN-END:variables
}
